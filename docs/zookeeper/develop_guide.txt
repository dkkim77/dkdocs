###########################################
			ZOOKEEPER
###########################################			
			

1. Zookeeper 데이터 모델 

	1.1 ZNodes
	- Persistent Node : 노드에 데이타를 저장하면 일부러 삭제하지 않는 이상 삭제되지 않고 영구히 저장된다.
	- Ephemeral Node : 노드를 생성한 클라이언트의 세션이 연결되어 있을 경우만 유효하다. 즉 클라이언트 연결이 끊어지는 순간 삭제 된다. 
								이를 통해서 클라이언트가 연결이 되어 있는지 아닌지를 판단하는데 사용할 수 있다. 
								(클러스터를 구성할때 클러스터내에 서버가 들어오면, 이 Ephemeral Node로 등록하면 된다.)
	- Sequence Node : 노드를 생성할때 자동으로 sequence 번호가 붙는 노드이다. 주로 분산락을 구현하는데 이용된다.
	(since 3.6.0)
	- Container Node : 컨테이너 노드라는 notion 이 있다. 컨테이너 znode 는 리더, 잠금 등과 같은 특수한 용도에 사용된다.
	- TTL Node : Persistent 또는 Persistent sequencial znode 에 TTL 을 설정할 수 있다. 
	- Watcher
		Watch 기능은 ZooKeeper 클라이언트가 특정 znode에 watch를 걸어놓으면, 해당 znode가 변경이 되었을때, 
		클라이언트로 callback 호출을 날려서 클라이언트에 해당 znode가 변경이 되었음을 알려준다. 
		그리고 해당 watcher는 삭제 된다.( 연결이 삭제되는 것이지 watcher 가 삭제되는 것은 아니다. default watcher 를 생각해보면 이해할 수 있다.)   
	- Data Access
		znode 에 저장된 데이터들은 ACL 에 의해 읽고 쓰기가 통제됩니다.
		zookeeper 는 데이터베이스처럼 대량의 데이터 저장을 위해 설계된 것이 아니라 coordination 데이터를 관리한다. 
		이 데이터는 configuration, 상태 정보, 랑데뷰 등입니다.
	
	1.2 Zookeeper 에서 시간
	- Zxid : zookeeper transaction id. zookeeper 에서 모든 변경 사항은 zxid 형식의 스탬프를 받아서 전체 순서가 표시. 
				각 변경마다 고유한 zxid 가 있으며 zxid1 이 zxid2 보다 작으면 zxid1 이 먼저 발생한 것임.
	- version numbers : 각 노드의 변경은 해당 노드의 버전을 증가시킨다. 버전은 세 가지가 있다.
		version : 데이터 변경 버전
		cversion : znode 자식들의 변경 버전
		aversion : znode ACL 변경 버전 
	- Ticks : 
	1.3 Zookeeper Stat 구조
	- czxid : znode 를 생성한 zxid
	- mzxid : 수정한 zxid
	- pzxid : 자식을 수정한 zxid
	- ctime : znode 를 생성한 epoch 시각
	- mtime : 변경한 epoch 시각
	- version
	- cversion
	- aversion 
	- ephemeralOwner : ephemeral znode 일 경우 이 노드의 소유자 session id. ephemeral 이 아니면 0
	- dataLength
	- numChildren : 자식 수
	
	2. Zookeeper Session
	
	3. Zookeeper Watches
	
	4. Zookeeper ACLs
	
	5. Zookeeper Java Examples
		5.1 A simple Watch Client :
		- 매개변수 4개 : Zookeeper 주소, znode 이름, 출력을 쓸 파일명, 인수가 있는 실행 파일
		- 프로세스 : znode 와 관련된 데이터를 가져오고 실행 파일을 시작
				> znode 가 변경되면 클라이언트는 내용을 다시 가져오고 실행 파일을 다시 시작
				> znode 가 사라지면 클라이언트는 실행 파일을 kill 한다.
		5.2 Design 
		- Executor Class : main 함수를 시작. Zookeeper 객체와 DataMonitor 를 포함.
									Zookeeper 에서 발생한 이벤트에 대한 응답으로 명령줄에서 전달한 실행 파일을 시작/중지. 
									
		- DataMonitor Class
		
6. 설정 		
	[zookeeper.properties]
		# 주키퍼 리스너 포트 
		clientPort=2181
		# tick 시간 설정
		tickTime=3000 (ms)
		# follower 가 leader 와 연결 시도 제한 횟수. 
		initLimit=10 (단위:tickTime. 1tick 은 3000ms)							
		# follower 가 leader 와 연결된 후 동기화되기 위한 제한 횟수 
		syncLimit=5 
				
		# 주키퍼 앙상블 (클러스터 내 노드들의 상호 연결)
		# server.<myid>=<호스트명>:<포트1>:<포트2> - port1:동기화 포트, port2:leader 선출용 포트 
		server.1=unchart77-01:2888:3888
		server.2=unchart78-02:2888:3888
		server.3=unchart79-03:2888:3888

7. 실행,종료,테스트
	zookeeper-server-start.sh -daemon ../config/zookeeper.properties
	zookeeper-server-stop.sh
	zookeeper-shell.sh localhost:2181[enter]
	ls /[enter]
	create /zookeeper/test welcome => 키/값 생성
	get /zookeeper/test            => 조회
	set /zookeeper/test bye        => 수정 
	delete /zookeeper/test         => 삭제